package initialize

import (
	"au-golang/global"
	"au-golang/model/WxBean"
	model "au-golang/model/migrate"
	"au-golang/model/system"
	"gorm.io/driver/mysql"
	"gorm.io/gorm"
)

//@author: SliverHorn
//@function: Gorm
//@description: 初始化数据库并产生数据库全局变量
//@return: *gorm.DB

func Gorm() *gorm.DB {
	switch global.GVA_CONFIG.System.DbType {
	case "mysql":
		return GormMysql()
	default:
		return GormMysql()
	}
}

// GormMysql 初始化Mysql数据库
func GormMysql() *gorm.DB {
	m := global.GVA_CONFIG.Mysql
	if m.Dbname == "" {
		return nil
	}
	mysqlConfig := mysql.Config{
		DSN:                       m.Dsn(), // DSN data source name
		DefaultStringSize:         191,     // string 类型字段的默认长度
		SkipInitializeWithVersion: false,   // 根据版本自动配置
	}
	// 连接数据库
	if db, err := gorm.Open(mysql.New(mysqlConfig)); err != nil {
		return nil
	} else {
		sqlDB, _ := db.DB()
		sqlDB.SetMaxOpenConns(m.MaxOpenConns)
		sqlDB.SetMaxIdleConns(m.MaxIdleConns)
		return db
	}
}

// MysqlTables
//@author: SliverHorn
//@function: MysqlTables
//@description: 注册数据库表专用
//@param: db *gorm.DB

func MysqlTables(db *gorm.DB) {
	AutoMigrate(db, &model.AuInterviewUser{})
	AutoMigrate(db, &model.AuInterviewDepartment{})
	AutoMigrate(db, &model.AuInterviewTimeTable{})
	AutoMigrate(db, &WxBean.WxUser{})
	AutoMigrate(db, &system.User{})
	AutoMigrate(db, &system.Ass{})
	AutoMigrate(db, &system.Outlay{})
	AutoMigrate(db, &system.ActivityComplete{})
	AutoMigrate(db, &system.Activity{})
	AutoMigrate(db, &system.Twitter{})
	AutoMigrate(db, &system.SynthesizeSubmit{})
	AutoMigrate(db, &WxBean.InterViewUser{})
	AutoMigrate(db, &WxBean.InterViewAss{})
	/*err := db.AutoMigrate(
		model.AuInterviewUser{},
		model.AuInterviewDepartment{},
		model.AuInterviewTimeTable{},
		model.Wxuser{},

		system.User{},
		system.Ass{},
		system.Outlay{},
		system.ActivityComplete{},
		system.Activity{},
		system.Twitter{},
		system.SynthesizeSubmit{},

		WxBean.InterviewUser{},
		WxBean.InterviewAss{},

		// Code generated by gin-vue-admin Begin; DO NOT EDIT.
		// Code generated by gin-vue-admin End; DO NOT EDIT.
	)
	if err != nil {
		//global.GVA_LOG.Error("register table failed", zap.Any("err", err))
		os.Exit(0)
	}*/
	//	global.GVA_LOG.Info("register table success")
}

func AutoMigrate(db *gorm.DB, model interface{}) {
	if err := db.AutoMigrate(model); err != nil {
		panic("table AutoMigrate fail")
	}
}

//@author: SliverHorn
//@function: gormConfig
//@description: 根据配置决定是否开启日志
//@param: mod bool
//@return: *gorm.Config

/*func gormConfig(mod bool) *gorm.Config {
	var config = &gorm.Config{DisableForeignKeyConstraintWhenMigrating: true}
	switch global.GVA_CONFIG.Mysql.LogZap {
	case "silent", "Silent":
		config.Logger = internal.Default.LogMode(logger.Silent)
	case "error", "Error":
		config.Logger = internal.Default.LogMode(logger.Error)
	case "warn", "Warn":
		config.Logger = internal.Default.LogMode(logger.Warn)
	case "info", "Info":
		config.Logger = internal.Default.LogMode(logger.Info)
	case "zap", "Zap":
		config.Logger = internal.Default.LogMode(logger.Info)
	default:
		if mod {
			config.Logger = internal.Default.LogMode(logger.Info)
			break
		}
		config.Logger = internal.Default.LogMode(logger.Silent)
	}
	return config
}*/
